{
  "nodes": [
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.2,
      "position": [
        272,
        528
      ],
      "id": "d649bfeb-2587-4979-85be-475f2ac8c33f",
      "name": "Telegram Trigger",
      "webhookId": "001b6838-d198-4f58-b5ce-7a1540d342f5"
    },
    {
      "parameters": {
        "url": "=  https://api.telegram.org/bot{{ $vars.telegramBotKey }}/getFile?file_id={{ $json.message.photo[2].file_id }}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        496,
        528
      ],
      "id": "833fd1ea-a85e-41ab-8b9b-d48dc161b561",
      "name": "Get File Path"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b76a60d6-fc75-4938-be5e-0e6d90faf896",
              "name": "img_url",
              "value": "=https://api.telegram.org/file/bot{{ $vars.telegramBotKey }}/{{ $json.result.file_path }}",
              "type": "string"
            },
            {
              "id": "2d241c7b-64bb-4aba-98c6-cfa4b63801fa",
              "name": "prompt",
              "value": "={{ $('Telegram Trigger').item.json.message.caption }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        704,
        528
      ],
      "id": "a23a5c18-39ba-4a38-88b0-3b6fd6c76738",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "url": "={{ $json.img_url }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        976,
        528
      ],
      "id": "220c2ee9-4fbf-4639-ad0e-5ac29a261cd5",
      "name": "HTTP Request1"
    },
    {
      "parameters": {
        "operation": "binaryToPropery",
        "destinationKey": "outputData",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        1168,
        480
      ],
      "id": "fdd0519b-b46c-4db0-9b85-a350bc507e03",
      "name": "Extract from File2"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-image-preview:generateContent",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "x-goog-api-key",
              "value": "AIzaSyCbTvN8Uj3WzFOjnqpXhY7qsTDivu9bTtg"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"contents\": [\n    {\n      \"parts\": [\n        {\n          \"inline_data\": {\n            \"mime_type\": \"image/png\",\n            \"data\": \"{{ $json.outputData }}\"\n          }\n        },\n        {\n          \"text\": \"{{ $json.prompt }}\"\n        }\n      ]\n    }\n  ],\n  \"generationConfig\": {\n    \"responseModalities\": [\n      \"IMAGE\"\n    ]\n  }\n} ",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1664,
        480
      ],
      "id": "2f0875d1-7cd8-4504-b44a-13d52b6e7e9d",
      "name": "Google Nano Banana API Call"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nconst lastItem = items[items.length - 1];\nconst base64Data =\n  lastItem?.json?.candidates[0]?.content?.parts?.slice(-1)[0]?.inlineData?.data;\n\nreturn { base64Data };\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1872,
        480
      ],
      "id": "592c419d-64e3-4c65-aed7-d60292532313",
      "name": "Code"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "32cf4aec-5fda-49fd-98db-f27a46e6427a",
              "name": "Image64String",
              "value": "={{ $json.base64Data }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2080,
        480
      ],
      "id": "3a9f4689-b489-4266-8d7e-1933306ef56b",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "Image64String",
        "binaryPropertyName": "GoogleCreatedImage",
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        2496,
        480
      ],
      "id": "13a67628-2a2c-456e-9af8-9b97af4b7fbb",
      "name": "Convert to File"
    },
    {
      "parameters": {
        "operation": "sendPhoto",
        "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "binaryData": true,
        "binaryPropertyName": "GoogleCreatedImage",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        2768,
        480
      ],
      "id": "afc618b7-8037-481f-9e9e-5e7c4885cbcd",
      "name": "Send Image1",
      "webhookId": "76cfe886-40b6-4e4a-a4dc-445ddc317bb3"
    },
    {
      "parameters": {
        "operation": "sendAndWait",
        "chatId": "={{ $json.result.chat.id }}",
        "message": "Here's your image! Please choose and option below and include your prompt.",
        "responseType": "customForm",
        "formFields": {
          "values": [
            {
              "fieldLabel": "Approved! Process the video with the following prompt",
              "placeholder": "Insert Prompt Here"
            },
            {
              "fieldLabel": "Undo this edit and try again with the original image",
              "placeholder": "Insert Prompt Here"
            }
          ]
        },
        "options": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        3008,
        480
      ],
      "id": "240ab439-8859-4c18-9737-776c4dab6067",
      "name": "Send message and wait for response1",
      "webhookId": "e542550c-33f6-4c55-b09a-662dd3b3d843",
      "credentials": {
        "telegramApi": {
          "id": "BzYg4YwJp5XT9z81",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.data }}",
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "=You are an expert AI agent responsible for processing user responses in an automation workflow. Your task is to analyze the given JSON input, identify the user’s chosen action (intent), and extract the corresponding prompt.\n\nThe JSON input will always contain two keys. Only one of them may include a user-provided text prompt, while the other will be empty.\n\n1. If the key `\"Undo this edit and try again with the original image\"` contains a value, set the intent to `\"RE-CREATE\"`.\n2. If the key `\"Approved! Process the video with the following prompt\"` contains a value, set the intent to `\"VIDEO\"`.\n\nYour output must be a single valid JSON object containing:\n- `\"intent\"`: A string with one of three possible values — `\"EDIT\"`, `\"VIDEO\"`, or `\"RE-CREATE\"`.\n- `\"prompt\"`: The extracted text from the input. If the user has entered text, return it as their detailed creative instruction. If no text is provided, return an empty string.\n\n---\n\n**Example 1**  \n**Input:**\n{\n  \"data\": {\n    \"Approved! Process the video with the following prompt\": \"make it cinematic and dramatic\",\n    \"Undo this edit and try again with the original image\": \"\"\n  }\n}\n\n**Output:**\n{\n  \"intent\": \"VIDEO\",\n  \"prompt\": \"make it cinematic and dramatic\"\n}\n\n---\n\n**Example 2**  \n**Input:**\n{\n  \"data\": {\n    \"Approved! Process the video with the following prompt\": \"\",\n    \"Undo this edit and try again with the original image\": \"change her shirt to blue\"\n  }\n}\n\n**Output:**\n{\n  \"intent\": \"RE-CREATE\",\n  \"prompt\": \"change her shirt to blue\"\n}\n"
            }
          ]
        },
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        3280,
        480
      ],
      "id": "21b4fb10-ad77-49b3-8f89-99ead9c7fbe7",
      "name": "Approval Processing1"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o",
          "mode": "list",
          "cachedResultName": "gpt-4o"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        3184,
        704
      ],
      "id": "52b4a114-138a-4c4b-b369-de0433199f5a",
      "name": "OpenAI Chat Model1"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"intent\": \"RE-CREATE\",\n  \"prompt\": \"change her shirt to blue\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        3424,
        704
      ],
      "id": "655dd071-ae1e-4e7a-889a-bccc592b3abf",
      "name": "Structured Output Parser1"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "3cf3a231-3eb3-46cf-a240-95328f2e2ca0",
                    "leftValue": "={{ $json.output.intent }}",
                    "rightValue": "VIDEO",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Create Video"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "723a5d85-6a60-4251-9117-3380de17546d",
                    "leftValue": "={{ $json.output.intent }}",
                    "rightValue": "RE-CREATE",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Edit"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        3648,
        480
      ],
      "id": "41b2d051-fed7-46fb-b722-633e51dffab2",
      "name": "Switch1"
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "text": "=We are working on your re-edit request.\n\n\n\n{{ $json.output.prompt }}",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        2512,
        848
      ],
      "id": "7180d093-345f-42d7-91be-5f92bad51d28",
      "name": "Send a text message1",
      "webhookId": "a5b1aa8a-6be3-414b-8714-9e06b04db59b"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "e7777df3-30c7-4039-afe3-dd12770e7465",
              "name": "outputData",
              "value": "={{ $('Edit Fields1').item.json.Image64String }}",
              "type": "string"
            },
            {
              "id": "532603eb-3d73-4548-8e2e-1e3137ae9e36",
              "name": "prompt",
              "value": "={{ $('Approval Processing1').item.json.output.prompt }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1552,
        832
      ],
      "id": "55e0d130-cb07-4fac-92a1-863c836e5923",
      "name": "Edit Fields2"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a417355d-ee69-4f1a-a3a2-01b37859dac9",
              "name": "outputData",
              "value": "={{ $json.outputData }}",
              "type": "string"
            },
            {
              "id": "104cdd6d-d01c-4df5-8333-fda1c42b42f9",
              "name": "prompt",
              "value": "={{ $('Telegram Trigger').item.json.message.caption }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1376,
        480
      ],
      "id": "8748e943-c953-44f7-91c4-0774f7b62a23",
      "name": "Edit Fields3"
    },
    {
      "parameters": {
        "content": "# Getting the Image from Telegram",
        "height": 896,
        "width": 1312
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        192,
        160
      ],
      "typeVersion": 1,
      "id": "eac63604-d8a1-4c16-95fd-16a30bf5d086",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "# Creating the image and the feedback loop",
        "height": 896,
        "width": 2368,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1504,
        160
      ],
      "typeVersion": 1,
      "id": "9f942ed3-49de-4c91-a832-c18846edb629",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "81ae7766-2711-434e-a388-fca253c4efc6",
              "name": "FinalBase64",
              "value": "={{ $('Edit Fields1').item.json.Image64String }}",
              "type": "string"
            },
            {
              "id": "5af345f0-9e69-4f42-9e0a-a814e97ded9e",
              "name": "prompt",
              "value": "={{ $json.output.prompt }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3952,
        464
      ],
      "id": "f50a3f46-131f-4cda-8ef5-1c27e83621ad",
      "name": "Edit Fields4"
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "FinalBase64",
        "binaryPropertyName": "GoogleCreatedImage",
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        4176,
        464
      ],
      "id": "61c4ba1c-f0b2-4f2a-9ff9-ae4cf661570d",
      "name": "Convert to File1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.imgbb.com/1/upload",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpQueryAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-type",
              "value": "multipart/form-data"
            }
          ]
        },
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "parameterType": "formBinaryData",
              "name": "image",
              "inputDataFieldName": "GoogleCreatedImage"
            }
          ]
        },
        "options": {}
      },
      "id": "42ced9dd-ea02-473c-be60-ff16b06d13ed",
      "name": "Upload Img to ImgBB for URL1",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        4416,
        464
      ],
      "notesInFlow": true,
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "resource": "image",
        "operation": "analyze",
        "modelId": {
          "__rl": true,
          "value": "chatgpt-4o-latest",
          "mode": "list",
          "cachedResultName": "CHATGPT-4O-LATEST"
        },
        "text": "=You are an expert AI cinematographer and storyteller. Your goal is to transform a single reference image and a short user-provided prompt into a vivid, cinematic description for an AI video generator.  \n\nYou will always be given:  \n1. A final scene image (URL).  \n2. A simple user text prompt that expresses creative intent.  \n\nYour task is to craft a **single flowing paragraph** that merges both inputs into a complete cinematic moment.  \n\nGuidelines:  \n- The user’s text prompt is the **creative driver** and must directly shape the scene’s action, tone, and mood.  \n- Build a cohesive description that includes: setting, subject action, body language, environment details, camera framing, lens style, motion, lighting, art style, and overall atmosphere.  \n- Keep the description natural, immersive, and visually striking.  \n- Ensure it feels like a lived moment, not staged.  \n\nYour output must be a **detailed paragraph**, not a list.  \n\n---\n\n**Example format (don’t reuse, only for style reference):**  \n“In a lively street market at golden hour, a young man strolls past colorful stalls while sipping from a glass bottle, laughing as he looks at friends off-camera. Captured in a medium handheld shot with slight shake and uneven framing, the camera tracks his movement as warm sunlight flickers across his face. The atmosphere feels candid, raw, and joyful — imperfect like a casual iPhone video, yet cinematic in its depth of color and mood.”  \n\n---\n\nThe user’s prompt is:   {{ $('Edit Fields4').item.json.prompt }}\n\n\n",
        "imageUrls": "={{ $json.data.url }}",
        "simplify": false,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        4672,
        464
      ],
      "id": "7e427329-1ce0-49fb-8325-b2a0f08c4962",
      "name": "Analyze image"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.choices[0].message.content }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=## SYSTEM PROMPT: Veo3_fast UGC Video Generator\n\nYou are an expert UGC (User-Generated Content) AI director.  \nYour mission: create **realistic, natural 8-second video prompts** for the Veo3_fast model.  \n\nYou will be given:  \n1. A **reference image** (URL + description).  \n2. A **short user text prompt** with creative intent.  \n\nYour job: turn these into **casual, authentic video prompts** that feel like real content captured by everyday people.  \n\n---\n1. **Dialogue (≤150 characters):**  \n   - Always casual, conversational, as if speaking to a friend.  \n   - Must flow naturally across scenes if more than one is generated.  \n   - Example tone: “honestly didn’t expect it to taste this good…”  \n\n2. **Action:**  \n   - Describe what the character is doing in the scene (showing product, reacting, moving naturally).  \n   - Keep actions simple and relatable — avoid staged posing.  \n\n3. **Character:**  \n   - Everyday people, 21–38 years old, diverse in gender/appearance.  \n   - Natural flaws welcome: messy hair, casual clothing, imperfections.  \n\n4. **Setting:**  \n   - Realistic everyday locations: living room, car, park, street, café.  \n   - Capture natural background details (clutter, people, environment).  \n\n5. **Camera:**  \n   - Must feel like amateur phone footage: uneven framing, slight shake, casual selfie, handheld panning.  \n   - Keywords: “amateur iPhone video, TikTok style, casual framing, natural daylight.”  \n\n6. **Emotion:**  \n   - Authentic reactions only — excitement, curiosity, casual joy, surprise.  \n   - No overacting or scripted vibe.  \n\n7. **Scene Duration:**  \n   - Each scene = **8 seconds exactly** (Veo3_fast constraint).  \n\n8. **Scene Count:**  \n   - Calculate based on total duration requested by the user ÷ 8 seconds, round up.  \n   - Always output **exactly that many scenes**.  \n\n---\n\n### OUTPUT FORMAT\nReturn a JSON object with the structure provided.\n\nMake sure that the prompt is not having any doube quotes or any other problem which can cause json to be become invalid when used as a value.\n\nPrompt should be a lot in detail  as per above instructions to create a stunning video with details about dialogue and environment etc. in proper lenghty format.\n---\n\n### INPUTS\n\n- User Request - \n\n- The detailed user prompt: {{ $('Edit Fields4').item.json.prompt }}\n- The reference image description: {{ $json.choices[0].message.content }}\n\n\n---\n\n### IMPORTANT\n- Do not create image prompts — only video prompts.  \n- Do not exceed 150 characters for dialogue.  \n- Always generate realistic, everyday UGC content.  \n\n\n\n\n\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        4960,
        464
      ],
      "id": "fa778eb5-b2df-4e19-87fe-6147a85f3faa",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o",
          "mode": "list",
          "cachedResultName": "gpt-4o"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        4912,
        656
      ],
      "id": "024a73d1-d294-42c8-85eb-98dd38f4b295",
      "name": "OpenAI Chat Model"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolThink",
      "typeVersion": 1.1,
      "position": [
        5072,
        832
      ],
      "id": "4d87b213-7e12-47fb-927e-755bcb33482a",
      "name": "Think"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"prompt\": \"generated_prompt\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        5200,
        720
      ],
      "id": "850e8d8b-3fd6-4fb9-a595-9a2713b4fbcd",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.kie.ai/api/v1/veo/generate",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer a7115cf8237f11362fab068b3c9eebe4"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $('Code1').item.json.toJsonString() }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        5520,
        464
      ],
      "id": "3015078d-dede-455b-b940-404e8d6d4f45",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "jsCode": "const prompt = $input.all()[0]?.json?.output?.prompt;\nconst imageUrl = $(\"Upload Img to ImgBB for URL1\").all()[0]?.json?.data?.url;\n\nreturn {\n  model: \"veo3_fast\",\n  aspectRatio: \"9:16\",\n  enableFallback: false,\n  prompt: prompt,\n  imageUrls: [imageUrl],\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        5312,
        464
      ],
      "id": "be16c8e2-e8ff-48db-85d6-eaade3c53346",
      "name": "Code1"
    },
    {
      "parameters": {
        "operation": "sendVideo",
        "chatId": "={{ $json.chatId }}",
        "file": "={{ $json.resultUrls }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        6160,
        688
      ],
      "id": "71005c12-1e90-4f0e-89ec-93fee1bd5324",
      "name": "Send a video",
      "webhookId": "90c8d0cf-7a09-4f59-b100-cd190ba4cfc6"
    },
    {
      "parameters": {},
      "id": "1af4fc6a-d994-46fa-880d-734626d6bc7f",
      "name": "Wait for Video Processing Completion1",
      "type": "n8n-nodes-base.wait",
      "position": [
        5760,
        464
      ],
      "webhookId": "bb6c2821-9586-44b7-8606-2ee69a77ed75",
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "url": "https://api.kie.ai/api/v1/veo/record-info",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "taskId",
              "value": "={{$json.data.taskId}}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "=Bearer a7115cf8237f11362fab068b3c9eebe4"
            }
          ]
        },
        "options": {}
      },
      "id": "b6257d46-a91f-4199-9c18-765df27e8704",
      "name": "Obtain the generated status1",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        5984,
        464
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "loose"
          },
          "conditions": [
            {
              "id": "db9a5dec-997b-4c3f-9582-37c9bbeb19ff",
              "operator": {
                "name": "filter.operator.equals",
                "type": "string",
                "operation": "equals"
              },
              "leftValue": "=true",
              "rightValue": "={{ $json.data.successFlag == 1 }}"
            },
            {
              "id": "96f16e5b-22a0-46b7-8a76-7eeec4a44105",
              "leftValue": "={{ $json.data.errorMessage }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notExists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "id": "614da5a1-c2f4-40f9-9701-8239d9524c5c",
      "name": "Check if Video Generation is Complete1",
      "type": "n8n-nodes-base.if",
      "position": [
        6224,
        464
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "fa5f375f-cddc-4f7b-a018-67c28015d18b",
              "name": "resultUrls",
              "type": "string",
              "value": "={{$json.data.response.resultUrls}}"
            },
            {
              "id": "8f93e12e-13da-495f-a686-c0abc22f39d9",
              "name": "chatId",
              "type": "string",
              "value": ""
            }
          ]
        },
        "options": {}
      },
      "id": "66db979e-0474-4261-a566-26a2f562f84b",
      "name": "Format and Display Video Results1",
      "type": "n8n-nodes-base.set",
      "position": [
        5952,
        688
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "content": "# Create video from veo 3 via kei.ai",
        "height": 896,
        "width": 2720,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        3872,
        160
      ],
      "typeVersion": 1,
      "id": "5332d32b-2365-436d-bb55-1ba3de2061cd",
      "name": "Sticky Note5"
    }
  ],
  "connections": {
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "Get File Path",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get File Path": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "Extract from File2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File2": {
      "main": [
        [
          {
            "node": "Edit Fields3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Nano Banana API Call": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File": {
      "main": [
        [
          {
            "node": "Send Image1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Image1": {
      "main": [
        [
          {
            "node": "Send message and wait for response1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send message and wait for response1": {
      "main": [
        [
          {
            "node": "Approval Processing1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Approval Processing1": {
      "main": [
        [
          {
            "node": "Switch1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Approval Processing1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "Approval Processing1",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Switch1": {
      "main": [
        [
          {
            "node": "Edit Fields4",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send a text message1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send a text message1": {
      "main": [
        [
          {
            "node": "Edit Fields2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields2": {
      "main": [
        [
          {
            "node": "Google Nano Banana API Call",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields3": {
      "main": [
        [
          {
            "node": "Google Nano Banana API Call",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields4": {
      "main": [
        [
          {
            "node": "Convert to File1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File1": {
      "main": [
        [
          {
            "node": "Upload Img to ImgBB for URL1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload Img to ImgBB for URL1": {
      "main": [
        [
          {
            "node": "Analyze image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyze image": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Think": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "AI Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Wait for Video Processing Completion1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait for Video Processing Completion1": {
      "main": [
        [
          {
            "node": "Obtain the generated status1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Obtain the generated status1": {
      "main": [
        [
          {
            "node": "Check if Video Generation is Complete1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check if Video Generation is Complete1": {
      "main": [
        [
          {
            "node": "Format and Display Video Results1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Wait for Video Processing Completion1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format and Display Video Results1": {
      "main": [
        [
          {
            "node": "Send a video",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "2e5cb6e1c2a31babfcc2b25f23d2748ce5260b3fe58612416675448ee5c451a1"
  }
}
